# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the averageish length a task takes, times 5
# That roughly accounts for variable system performance for various buildvariants
exec_timeout_secs: 1800 # 30 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"
    # Applies the submitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
    # Make an evergreen exapanstion file with dynamic values
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
           # Get the current unique version of this checkout
           if [ "${is_patch}" = "true" ]; then
              CURRENT_VERSION=$(git describe)-patch-${version_id}
           else
              CURRENT_VERSION=latest
           fi

           export PROJECT_DIRECTORY="$(pwd)"

           cat <<EOT > expansion.yml
           CURRENT_VERSION: "$CURRENT_VERSION"
           PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
           PREPARE_SHELL: |
              set -o errexit
              set -o xtrace
              export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"
              export PROJECT="${project}"
           EOT
           # See what we've done
           cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "install dependencies":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          SWIFT_VERSION=${SWIFT_VERSION} \
            sh ${PROJECT_DIRECTORY}/.evergreen/install-dependencies.sh

  "run tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          SWIFT_VERSION=${SWIFT_VERSION} \
          sh ${PROJECT_DIRECTORY}/.evergreen/run-tests.sh

pre:
  - func: "fetch source"
  - func: "install dependencies"

tasks:
    - name: "test"
      commands:
        - func: "run tests"

axes:
  - id: os-fully-featured
    display_name: OS
    values:
      - id: ubuntu-18.04
        display_name: "Ubuntu 18.04"
        run_on: ubuntu1804-test

      - id: ubuntu-16.04
        display_name: "Ubuntu 16.04"
        run_on: ubuntu1604-test

      - id: macos-1014
        display_name: "macOS 10.14"
        run_on: macos-1014

  - id: swift-version
    display_name: "Swift"
    values:
      - id: "5.1"
        display_name: "Swift 5.1"
        variables:
           SWIFT_VERSION: "5.1.4"
      - id: "5.2"
        display_name: "Swift 5.2"
        variables:
           SWIFT_VERSION: "5.2"

buildvariants:

- matrix_name: "tests-all"
  matrix_spec:
    os-fully-featured: "*"
    swift-version: "*"
  display_name: "${swift-version} ${os-fully-featured}}"
  tasks:
    - name: "test"
