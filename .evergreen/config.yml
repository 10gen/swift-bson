# When a task that used to pass starts to fail
# Go through all versions that may have been skipped to detect
# when the task started failing
stepback: true

# Mark a failure as a system/bootstrap failure (purple box) rather then a task
# failure by default.
# Actual testing tasks are marked with `type: test`
command_type: system

# Protect ourself against rogue test case, or curl gone wild, that runs forever
# Good rule of thumb: the averageish length a task takes, times 5
# That roughly accounts for variable system performance for various buildvariants
exec_timeout_secs: 1800 # 30 minutes is the longest we'll ever run

# What to do when evergreen hits the timeout (`post:` tasks are run automatically)
timeout:
  - command: shell.exec
    params:
      script: |
        ls -la

functions:
  "fetch source":
    # Executes git clone and applies the submitted patch, if any
    - command: git.get_project
      params:
        directory: "src"
    # Applies the submitted patch, if any
    # Deprecated. Should be removed. But still needed for certain agents (ZAP)
    - command: git.apply_patch
    # Make an evergreen exapanstion file with dynamic values
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          # Get the current unique version of this checkout
          if [ "${is_patch}" = "true" ]; then
             CURRENT_VERSION=$(git describe)-patch-${version_id}
          else
             CURRENT_VERSION=latest
          fi

          export PROJECT_DIRECTORY="$(pwd)"

          cat <<EOT > expansion.yml
          CURRENT_VERSION: "$CURRENT_VERSION"
          PROJECT_DIRECTORY: "$PROJECT_DIRECTORY"
          PREPARE_SHELL: |
             set -o errexit
             set -o xtrace
             export PROJECT_DIRECTORY="$PROJECT_DIRECTORY"
             export PROJECT="${project}"
             export INSTALL_DIR="${PROJECT_DIRECTORY}/opt"
          EOT
          # See what we've done
          cat expansion.yml

    # Load the expansion file to make an evergreen variable with the current unique version
    - command: expansions.update
      params:
        file: src/expansion.yml

  "install swift":
    - command: shell.exec
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          SWIFT_VERSION=${SWIFT_VERSION} \
            sh ${PROJECT_DIRECTORY}/.evergreen/install-swift.sh

  "format":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          SWIFT_VERSION=${SWIFT_VERSION} \
            bash ${PROJECT_DIRECTORY}/.evergreen/install-tools.sh swiftformat
          SWIFT_VERSION=${SWIFT_VERSION} \
          ${PROJECT_DIRECTORY}/opt/swiftformat/.build/release/swiftformat --verbose --lint .

  "lint":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          SWIFT_VERSION=${SWIFT_VERSION} \
            bash ${PROJECT_DIRECTORY}/.evergreen/install-tools.sh swiftlint
          LINUX_SOURCEKIT_LIB_PATH=${PROJECT_DIRECTORY}/opt/swiftenv/versions/${SWIFT_VERSION}/usr/lib \
            ${PROJECT_DIRECTORY}/opt/swiftlint/.build/release/swiftlint --strict --quiet

  "run tests":
    - command: shell.exec
      type: test
      params:
        working_dir: "src"
        script: |
          ${PREPARE_SHELL}
          SWIFT_VERSION=${SWIFT_VERSION} \
          SANITIZE=${SANITIZE} \
          CHECK_LEAKS=${CHECK_LEAKS} \
          ${PROJECT_DIRECTORY}/.evergreen/run-tests.sh
  
  "upload test results":
    - command: attach.xunit_results
      params:
        file: ./src/testResults.xml

pre:
  - func: "fetch source"
  - func: "install swift"

post:
  - func: "upload test results"

tasks:
  - name: "test"
    commands:
      - func: "run tests"
  - name: "check-format"
    commands:
      - func: "format"
  - name: "check-lint"
    commands:
      - func: "lint"

axes:
  - id: os-fully-featured
    display_name: OS
    values:
      - id: ubuntu-18.04
        display_name: "Ubuntu 18.04"
        run_on: ubuntu1804-test

      - id: ubuntu-20.04
        display_name: "Ubuntu 20.04"
        run_on: ubuntu2004-test

      - id: macos-10.15
        display_name: "macOS 10.15"
        run_on: macos-1015

  - id: swift-version
    display_name: "Swift"
    values:
      - id: "5.1"
        display_name: "Swift 5.1"
        variables:
          SWIFT_VERSION: "5.1.5"
      - id: "5.2"
        display_name: "Swift 5.2"
        variables:
          SWIFT_VERSION: "5.2.5"
      - id: "5.3"
        display_name: "Swift 5.3"
        variables:
          SWIFT_VERSION: "5.3.3"
      - id: "5.4"
        display_name: "Swift 5.4"
        variables:
          SWIFT_VERSION: "5.4.2"
      - id: "5.5"
        display_name: "Swift 5.5"
        variables:
          SWIFT_VERSION: "5.5"
      - id: "6.0-dev"
        display_name: "Swift 6.0-dev"
        variables:
          SWIFT_VERSION: "main-snapshot"

  - id: sanitize
    display_name: Sanitize
    values:
      - id: tsan
        display_name: TSan
        variables:
          SANITIZE: "thread"
      # ASan is unfortunately known to produce false positives in Swift, see
      # https://forums.swift.org/t/test-for-memory-leaks-in-ci/36526/9 
      # - id: asan
      #   display_name: ASan
      #   variables:
      #     SANITIZE: "address"

  - id: check-leaks
    display_name: Check Leaks
    values:
      - id: leaks
        display_name: Leaks
        variables:
          CHECK_LEAKS: leaks

buildvariants:
  # test two latest stable releases, plus latest dev snapshots
  - matrix_name: "tests-all"
    display_name: "${swift-version} ${os-fully-featured}"
    matrix_spec:
      os-fully-featured: "*"
      swift-version:
        - "5.4"
        - "5.5"
        - "6.0-dev"
    tasks:
      - name: "test"

  # test our lowest supported version
  - matrix_name: "tests-5.1"
    display_name: "${swift-version} ${os-fully-featured}"
    matrix_spec:
      # Swift 5.1 does not have Ubuntu 20.04 toolchains
      os-fully-featured:
        - "ubuntu-18.04"
        - "macos-10.15"
      swift-version:
        - "5.1"
    tasks:
      - name: "test"

  - matrix_name: "format-lint"
    display_name: "Format and Lint"
    matrix_spec:
      os-fully-featured: "ubuntu-18.04"
      swift-version: "5.4" # updating to 5.5 blocked on a SwiftLint release > 0.44
    tasks:
      - name: "check-format"
      - name: "check-lint"

  - matrix_name: "sanitize"
    display_name: "${sanitize} ${os-fully-featured}"
    matrix_spec:
      os-fully-featured: "ubuntu-18.04"
      swift-version: "5.5"
      sanitize: "tsan"
    tasks:
      - name: "test"

  - matrix_name: "leaks"
    display_name: "Leak Checker ${os-fully-featured}"
    matrix_spec:
      os-fully-featured: "macos-10.15"
      swift-version: "5.5"
      check-leaks: "leaks"
    tasks:
      - name: "test"
